初始化 mpp 系统

    /******************************************
     step 2: mpp system init. 
    ******************************************/
    s32Ret = SAMPLE_COMM_SYS_Init(&stVbConf);
    if (HI_SUCCESS != s32Ret)
    {
        SAMPLE_PRT("system init failed with %d!\n", s32Ret);
        goto END_VENC_SNAP_0;
    }

初始化 VB_CONF_S 参数
    memset(&stVbConf,0,sizeof(VB_CONF_S));

    stVbConf.u32MaxPoolCnt = 128;   整个系统中可容纳的缓存池个数
	                                公共缓存池属性结构体 stVbConf.astCommPool
    
    /* video buffer*/
    u32BlkSize = SAMPLE_COMM_SYS_CalcPicVbBlkSize(gs_enNorm,\
                enSize, SAMPLE_PIXEL_FORMAT, SAMPLE_SYS_ALIGN_WIDTH);
    stVbConf.astCommPool[0].u32BlkSize = u32BlkSize;   每个缓存块的大小（以 byte 为单位）
    stVbConf.astCommPool[0].u32BlkCnt = 10;            缓存块的个数

    /* hist buf*/
    stVbConf.astCommPool[1].u32BlkSize = (196*4);      每个缓存块的大小（以 byte 为单位）
    stVbConf.astCommPool[1].u32BlkCnt = 6;             缓存块的个数

初始化 MPP_SYS_CONF_S 参数
    MPP_SYS_CONF_S stSysConf = {0};
	stSysConf.u32AlignWidth = SAMPLE_SYS_ALIGN_WIDTH;  整个系统中使用图像的 stride 字节对齐数

******************************************************************************
* function : vb init & MPI system init
******************************************************************************/
HI_S32 SAMPLE_COMM_SYS_Init(VB_CONF_S *pstVbConf)
{
    MPP_SYS_CONF_S stSysConf = {0};
    HI_S32 s32Ret = HI_FAILURE;

    HI_MPI_SYS_Exit();  去初始化 MPP系统
    HI_MPI_VB_Exit();   去初始化 MPP 视频缓存池

    if (NULL == pstVbConf)
    {
        SAMPLE_PRT("input parameter is null, it is invaild!\n");
        return HI_FAILURE;
    }

    s32Ret = HI_MPI_VB_SetConf(pstVbConf);  设置 MPP 视频缓存池属性
	                                        视频缓存池属性指针 pstVbConf
											只能在系统处于未初始化的状态下，才可以设置缓存池属性，否则会返回失败
    if (HI_SUCCESS != s32Ret)
    {
        SAMPLE_PRT("HI_MPI_VB_SetConf failed!\n");
        return HI_FAILURE;
    }

    s32Ret = HI_MPI_VB_Init();  初始化 MPP视频缓存池。
	                            必须先调用 HI_MPI_VB_SetConf 配置缓存池属性，再初始化缓存池
    if (HI_SUCCESS != s32Ret)
    {
        SAMPLE_PRT("HI_MPI_VB_Init failed!\n");
        return HI_FAILURE;
    }

    stSysConf.u32AlignWidth = SAMPLE_SYS_ALIGN_WIDTH;
    s32Ret = HI_MPI_SYS_SetConf(&stSysConf);  配置系统控制参数
	                                          只有在 MPP整个系统处于未初始化状态，才可调用此函数配置 MPP系统
    if (HI_SUCCESS != s32Ret)
    {
        SAMPLE_PRT("HI_MPI_SYS_SetConf failed\n");
        return HI_FAILURE;
    }

    s32Ret = HI_MPI_SYS_Init();
	初始化 MPP系统。除了音频的编解码通道外，所有的音频输入输出、视频输入输出、视频编码、视频叠加区域、视频侦测分析等都会被初始化
	必须先调用 HI_MPI_SYS_SetConf配置 MPP系统后才能初始化
	由于 MPP 系统的正常运行依赖于缓存池，因此必须先调用 HI_MPI_VB_Init 初始化缓存池，再初始化 MPP 系统
	如果多次初始化，仍会返回成功，但实际上系统不会对 MPP 的运行状态有任何影响
	只要有一个进程进行初始化即可，不需要所有的进程都做系统初始化的操作

    if (HI_SUCCESS != s32Ret)
    {
        SAMPLE_PRT("HI_MPI_SYS_Init failed!\n");
        return HI_FAILURE;
    }

    return HI_SUCCESS;
}
/******************************************************************************
* function : calculate VB Block size of picture.
******************************************************************************/
HI_U32 SAMPLE_COMM_SYS_CalcPicVbBlkSize(VIDEO_NORM_E enNorm, PIC_SIZE_E enPicSize, PIXEL_FORMAT_E enPixFmt, HI_U32 u32AlignWidth)
{
    HI_S32 s32Ret = HI_FAILURE;
    SIZE_S stSize;

    s32Ret = SAMPLE_COMM_SYS_GetPicSize(enNorm, enPicSize, &stSize);
    if (HI_SUCCESS != s32Ret)
    {
        SAMPLE_PRT("get picture size[%d] failed!\n", enPicSize);
            return HI_FAILURE;
    }

    if (PIXEL_FORMAT_YUV_SEMIPLANAR_422 != enPixFmt && PIXEL_FORMAT_YUV_SEMIPLANAR_420 != enPixFmt)
    {
        SAMPLE_PRT("pixel format[%d] input failed!\n", enPixFmt);
            return HI_FAILURE;
    }

    if (16!=u32AlignWidth && 32!=u32AlignWidth && 64!=u32AlignWidth)
    {
        SAMPLE_PRT("system align width[%d] input failed!\n",\
               u32AlignWidth);
            return HI_FAILURE;
    }
    //SAMPLE_PRT("w:%d, u32AlignWidth:%d\n", CEILING_2_POWER(stSize.u32Width,u32AlignWidth), u32AlignWidth);
    return (CEILING_2_POWER(stSize.u32Width, u32AlignWidth) * \
            CEILING_2_POWER(stSize.u32Height,u32AlignWidth) * \
           ((PIXEL_FORMAT_YUV_SEMIPLANAR_422 == enPixFmt)?2:1.5));
}